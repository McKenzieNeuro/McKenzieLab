function sm_reClusterKlustakwik(datfil,varargin)
%this function takes output from spyking circus or kilosort and with units
%with more than thres ISI violations runs klustakwik
%
% input
% datafil = pull path of the data file. the samedirectory name that must have:
% basename.dat, basename.xml and
% subdirectory with output of phy




warning off
p = inputParser;


addParameter(p,'recluserThres','exp2',@ischar) %method to correct for decaying signal
addParameter(p,'reclusterISI',1,@isnumeric) % how much time (s) to skip before calculating mean/std/decay
addParameter(p,'streams',{'x465A','x405A'},@iscell) %which LED streams are recorded?
addParameter(p,'isosbestic','x405A',@ischar) % which stream is the isosbestic?
addParameter(p,'endTime',[],@isnumeric) % when was the LED turned off (s)?
addParameter(p,'returnedDataType','corrected',@ischar) % do we want (corrected,signal, isosbestic,raw)

parse(p,varargin{:})


photoBleachCorrection = p.Results.photoBleachCorrection;
skiptime = p.Results.skiptime;
streams = p.Results.streams;
isosbestic = p.Results.isosbestic;
endTime = p.Results.endTime;
returnedDataType = p.Results.returnedDataType;





%path for program must be in your environment path
program = 'klustakwik';

%free params
recluserThres = .01;
reclusterISI = .002;


xml = LoadXml([datfil(1:end-3) 'xml']);
fs = xml.SampleRate;

[dirN] = fileparts(datfil);

%find subdirectory
fils= getAllExtFiles(dirN,'npy',1);

kp = contains(fils,'pc_features');
fils = fils(kp);


if ~isempty(fils) && length(fils)==1
    [a,b] = fileparts(fils{1});
    fet = readNPY(fils{1});

    clufil = [a filesep 'spike_clusters.npy'];

    tempfil = [a filesep 'spike_templates.npy'];

    copyfile(tempfil,clufil)

    clu = readNPY(tempfil);

    tsfil = [a filesep 'spike_times.npy'];
    ts = readNPY(tsfil);
    ts = double(ts)/fs;
    uclu = unique(clu);
    maxClu = max(clu);
    for j = uclu'

        tst =  double(ts(clu==j));


        if mean(diff(tst)<reclusterISI)>recluserThres

            recluster
            kp = any(squeeze(fet(clu==j,1,:))',2);

            fett = fet(clu==j,:,kp);
            fett = reshape(fett,size(fett,1),size(fett,2)*size(fett,3));

            rescale for int64
            factor = 2^60;
            factor = int64(factor/max(abs(fett(:))));
            fet2 = int64(fett) * factor;



            fetname = fullfile(a, ['tmp.fet.1']);
            cluname = fullfile(a, ['tmp.clu.1']);



            % write temp feature (fet) file
            SaveFetIn(fetname,fet2);



            recluster
            cmd = [program  ' ' fullfile(a,'tmp') ' 1'];
            cmd = [cmd ' -UseDistributional 0 -MaxPossibleClusters 20 -MinClusters 20'];

            status = system(cmd);

            relabel
            clut = load(cluname);
            clut = clut(2:end); % toss the first sample to match res/spk files
            clut = int32(maxClu)+int32(clut);

            clu(clu==j) = clut;
            writeNPY((clu), clufil)
            maxClu = max(clut);
        end


    end


    % exclude noisy units
    good = assign_noise(clufil,ts,varargin);

    %
    getAllZeroLag(datfil,clufil,ts,good)
end




end



function getAllZeroLag(datfil, clufil,ts,good)




%set defaults
noiseThres = .005;
noiseISI = 0.001;
minRate = 0.1;
binSize = .0005; %.5ms
duration = .2; %200ms
conv_w = .002/binSize;  % 2ms window
alpha = 0.001;


%load data
clu = readNPY(clufil);
maxT = max(ts);
uclu = unique(clu);

[wf,shank] = getWaveform(datfil,clu,ts,good);
%%
CC = nan(length(uclu),length(uclu));


for i = 1:length(uclu)
    if good(i)

        tsti = ts(clu==uclu(i));

        for j = i+1:length(uclu)
            if good(j) && shank(i)==shank(j)



                tstj = ts(clu==uclu(j));
                cch = CrossCorr(tsti,tstj,binSize,ceil(duration/binSize)+1);





                %delete other parts of the refractory period

                cch([200 202]) = [];


                [pvals,pred,qvals]=bz_cch_conv(cch,conv_w);

                hiBound=poissinv(1-alpha,pred);



                if cch(200) > hiBound(200)

                    subplot(1,3,1)
                    plot(cch)
                    subplot(1,3,2)
                    imagesc(wf{i}')
                    subplot(1,3,3)
                    imagesc(wf{j}')
                    waitforbuttonpress
                    close all
                end
                %handle empty refractory period (ISI violation <

                CC(i,j) = tmp(2)/length(tsti);
            end
        end
    end
end
%%

end


