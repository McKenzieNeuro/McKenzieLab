
function [good,wf] = sm_assign_noise(datfil,varargin)

%%







p = inputParser;


addParameter(p,'fs',30000,@isnumeric)
addParameter(p,'clufil',[],@isstr)
addParameter(p,'minRate',.1,@isnumeric)
addParameter(p,'noiseISI',.002,@isnumeric)
addParameter(p,'noiseThres',.005,@isnumeric)


parse(p,varargin{:})


fs = p.Results.fs;
clufil = p.Results.clufil;
minRate = p.Results.minRate;
noiseISI = p.Results.noiseISI;
noiseThres = p.Results.noiseThres;


if isempty(clufil)
    
    [dirN] = fileparts(datfil);
    
    %find subdirectory
    fils= getAllExtFiles(dirN,'npy',1);
    
    kp = contains(fils,'spike_clusters');
    fils = fils(kp);
    
    
    if ~isempty(fils) && length(fils)==1
        clufil = fils{1};
    else
        error('must specify clufile')
    end
end


[a,b] = fileparts(clufil);

if isempty(a)
    a = pwd;
end


% load data
tsfil = [a filesep 'spike_times.npy'];
ts = readNPY(tsfil);
ts = double(ts)/fs;



fid = fopen([a filesep 'cluster_group.tsv'],'wt');
fprintf(fid, 'cluster_id	group\n');
clu = readNPY(clufil);




if length(clu)~=length(ts)
    
    error('clu IDs do not match length of times')
end


%%
uclu = unique(clu);
nclu = length(uclu);
maxT = double(max(ts));
ix = 1;
good = true(nclu,1);

%%
binSize = .0005;
conv_w = .5/binSize;  % 2ms window
alpha = .05;
% assign as noise due to ISI violations
for i = uclu'
    tst = ts(clu==i);
     cch = CrossCorr(tst,tst,binSize,1001);
     
        
    pred = mean(cch(1:100));
     cch = cch(502:505);
     
     
    %if length(tst)/maxT<minRate ||  mean(diff(tst)<noiseISI)>noiseThres

 pvals = 1 - poisscdf( cch - 1, pred  ) - poisspdf( cch, pred  ) * 0.5; 


    if any(hiBound(4999:5001)<cch((4999:5001)))
        fprintf(fid, [num2str(i) '	noise\n']);
        good(ix) = false;
        isiVal(ix) =  mean(diff(tst)<noiseISI);
    end
   % end
    ix = ix+1;
end


%%
[wfF, shank] = sm_getWaveform(datfil,clu,ts,good)


% assign as noise due to waveform abnormalities
ix = 1;
for i = uclu'
    
    if good(ix)
    end
    ix = ix+1;
end




fclose(fid);
%%
end
